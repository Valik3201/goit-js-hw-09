{"mappings":"iiBACA,IAAAA,EAAAC,EAAA,SAGAC,EAAAF,GAASG,OAAOC,KAAK,CACnBC,SAAU,OACVC,MAAO,QACPC,kBAAmB,cACnBC,aAAa,EACbC,SAAS,EACTC,cAAc,IAIHC,SAASC,cAAc,SA4D/BC,iBAAiB,UAzDtB,SAAsBC,G,kBAiBhBC,YAAW,WAET,IAsBeC,EAAUC,GAAVD,EAnBDE,EAmBWD,EAtBRE,GAAgBD,EAAI,GAAKE,EAuBzC,IAAIC,SAAQ,SAACC,EAASC,GAELC,KAAKC,SAAW,GAIpCH,EAAQ,CAAEN,WAAUC,UAGpBM,EAAO,CAAEP,WAAUC,S,KA5BdS,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAEjBf,EAAAF,GAASG,OAAOyB,QACd,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAGjDa,OAAM,SAAAH,G,IAAGX,EAAQW,EAARX,SAAUC,EAAKU,EAALV,MAElBf,EAAAF,GAASG,OAAO4B,QACd,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,MAGhDC,EAAIE,E,EAlCXN,EAAMkB,iBAGN,IAAgCC,EAAAnB,EAAMoB,cAAcC,SAA5CC,EAAwBH,EAAxBhB,MAAOoB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAGfnB,EAAeoB,SAASH,EAAMI,OAC9BpB,EAAYmB,SAASF,EAAKG,OAGhC,GAAIrB,EAAe,GAAKC,GAAa,GAAKkB,EAAOE,OAAS,EAExDtC,EAAAF,GAASG,OAAOsC,QAAQ,sCAGxB,IAAK,IAAIC,EAAI,EAAGA,GAAKJ,EAAOE,MAAOE,IAAGC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["// Import Notiflix library\nimport Notiflix from \"notiflix\";\n\n// Styles for Notiflix\nNotiflix.Notify.init({\n  fontSize: \"1rem\",\n  width: \"400px\",\n  cssAnimationStyle: \"from-bottom\",\n  closeButton: false,\n  useIcon: false,\n  pauseOnHover: true,\n});\n\n// Select the form element\nconst form = document.querySelector(\".form\");\n\n// Event handler for the form submission\nfunction onSubmitForm(event) {\n  event.preventDefault();\n\n  // Extracting input values from the form\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  // Convert delay and step to numbers\n  const initialDelay = parseInt(delay.value);\n  const stepValue = parseInt(step.value);\n\n  // Check for valid input values\n  if (initialDelay < 0 || stepValue <= 0 || amount.value <= 0) {\n    // Display a warning message if any input is not a valid non-negative number\n    Notiflix.Notify.warning(\"❗ Please enter positive value\");\n  } else {\n    // Loop to create and handle promises based on user input\n    for (let i = 1; i <= amount.value; i++) {\n      setTimeout(() => {\n        // Calculate totalDelay for each iteration\n        let totalDelay = initialDelay + (i - 1) * stepValue;\n\n        // Creating a promise using the createPromise function\n        createPromise(i, totalDelay)\n          .then(({ position, delay }) => {\n            // Displaying a success notification when the promise is fulfilled\n            Notiflix.Notify.success(\n              `✅ Fulfilled promise ${position} in ${delay}ms`\n            );\n          })\n          .catch(({ position, delay }) => {\n            // Displaying an error notification when the promise is rejected\n            Notiflix.Notify.failure(\n              `❌ Rejected promise ${position} in ${delay}ms`\n            );\n          });\n      }, i * stepValue);\n    }\n  }\n}\n\n// Function to create a promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Generating a random value to determine whether the promise should be fulfilled or rejected\n    const shouldResolve = Math.random() > 0.3;\n\n    if (shouldResolve) {\n      // Fulfill\n      resolve({ position, delay });\n    } else {\n      // Reject\n      reject({ position, delay });\n    }\n  });\n}\n\n// Adding a submit event listener to the form\nform.addEventListener(\"submit\", onSubmitForm);\n"],"names":["$6JpON","parcelRequire","$parcel$interopDefault","Notify","init","fontSize","width","cssAnimationStyle","closeButton","useIcon","pauseOnHover","document","querySelector","addEventListener","event","setTimeout","position","delay","i","initialDelay","stepValue","Promise","resolve","reject","Math","random","then","param","success","concat","catch","failure","preventDefault","_elements","currentTarget","elements","delay1","step","amount","parseInt","value","warning","i1","_loop"],"version":3,"file":"03-promises.4b7920de.js.map"}