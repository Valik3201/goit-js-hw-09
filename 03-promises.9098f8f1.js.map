{"mappings":"gfACA,IAAAA,EAAAC,EAAA,SAoEA,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EAEFF,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IA9EPJ,EAAAY,OAAOC,KAAK,CACVC,SAAU,OACVC,MAAO,QACPC,kBAAmB,cACnBC,aAAa,EACbC,SAAS,EACTC,cAAc,IAIHC,SAASC,cAAc,SAyE/BC,iBAAiB,UAtEtB,SAAsBC,GACpBA,EAAMC,iBAGN,IAAgCC,EAAAF,EAAMG,cAAcC,SAA5CC,EAAwBH,EAAxBrB,MAAOyB,EAAiBJ,EAAjBI,KAAMC,EAAWL,EAAXK,OAGfC,EAAeC,SAASJ,EAAMK,OAC9BC,EAAYF,SAASH,EAAKI,OAGhC,GAAIF,EAAe,GAAKG,GAAa,GAAKJ,EAAOG,OAAS,EAExDjC,EAAAY,OAAOuB,QAAQ,sCAGf,IAAK,IAAIC,EAAI,EAAGA,GAAKN,EAAOG,MAAOG,IAAK,CAEtC,IAAMC,EAAYC,YAAYC,MAM9BrC,EAAckC,EAHGL,GAAgBK,EAAI,GAAKF,GAIvCM,MAAK,SAAAC,G,IAAGtC,EAAQsC,EAARtC,SAAUC,EAAKqC,EAALrC,MAEXsC,EAAcJ,YAAYC,MAAQF,EAExCrC,EAAAY,OAAO+B,QACL,uBAAwCC,OAAfzC,EAAS,QAA0ByC,OAApBxC,EAAM,gBAE5CwC,OAF0DF,EAAYG,QACtE,GACA,O,IAGLC,OAAM,SAAAL,G,IAAGtC,EAAQsC,EAARtC,SAAUC,EAAKqC,EAALrC,MAEZsC,EAAcJ,YAAYC,MAAQF,EAExCrC,EAAAY,OAAOmC,QACL,sBAAqCH,OAAfzC,EAAS,QAA0ByC,OAApBxC,EAAM,gBAEzCwC,OAFuDF,EAAYG,QACnE,GACA,O,IAMZtB,EAAMG,cAAcsB,O","sources":["src/js/03-promises.js"],"sourcesContent":["// Import Notiflix as a Module\nimport { Notify } from \"notiflix/build/notiflix-notify-aio\";\n\n// Styles for Notiflix\nNotify.init({\n  fontSize: \"1rem\",\n  width: \"450px\",\n  cssAnimationStyle: \"from-bottom\",\n  closeButton: false,\n  useIcon: false,\n  pauseOnHover: true,\n});\n\n// Select the form element\nconst form = document.querySelector(\".form\");\n\n// Event handler for the form submission\nfunction onSubmitForm(event) {\n  event.preventDefault();\n\n  // Extracting input values from the form\n  const { delay, step, amount } = event.currentTarget.elements;\n\n  // Convert delay and step to numbers\n  const initialDelay = parseInt(delay.value);\n  const stepValue = parseInt(step.value);\n\n  // Check for valid input values\n  if (initialDelay < 0 || stepValue <= 0 || amount.value <= 0) {\n    // Display a warning message if any input is not a valid non-negative number\n    Notify.warning(\"❗ Please enter positive value\");\n  } else {\n    // Loop to create and handle promises based on user input\n    for (let i = 1; i <= amount.value; i++) {\n      // Record the start time\n      const startTime = performance.now();\n\n      // Calculate totalDelay for each iteration\n      let totalDelay = initialDelay + (i - 1) * stepValue;\n\n      // Creating a promise using the createPromise function\n      createPromise(i, totalDelay)\n        .then(({ position, delay }) => {\n          // Calculate the elapsed time\n          const elapsedTime = performance.now() - startTime;\n          // Displaying a success notification when the promise is fulfilled\n          Notify.success(\n            `✅ Fulfilled promise ${position} in ${delay}ms (Actual: ${elapsedTime.toFixed(\n              0\n            )}ms)`\n          );\n        })\n        .catch(({ position, delay }) => {\n          // Calculate the elapsed time\n          const elapsedTime = performance.now() - startTime;\n          // Displaying an error notification when the promise is rejected\n          Notify.failure(\n            `❌ Rejected promise ${position} in ${delay}ms (Actual: ${elapsedTime.toFixed(\n              0\n            )}ms)`\n          );\n        });\n    }\n  }\n\n  event.currentTarget.reset();\n}\n\n// Function to create a promise\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    // Generating a random value to determine whether the promise should be fulfilled or rejected\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\n// Adding a submit event listener to the form\nform.addEventListener(\"submit\", onSubmitForm);\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","init","fontSize","width","cssAnimationStyle","closeButton","useIcon","pauseOnHover","document","querySelector","addEventListener","event","preventDefault","_elements","currentTarget","elements","delay1","step","amount","initialDelay","parseInt","value","stepValue","warning","i","startTime","performance","now","then","param","elapsedTime","success","concat","toFixed","catch","failure","reset"],"version":3,"file":"03-promises.9098f8f1.js.map"}